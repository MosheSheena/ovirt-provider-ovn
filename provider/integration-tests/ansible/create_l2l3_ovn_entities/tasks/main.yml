---
- name: create a logical network
  os_network:
    cloud: "{{ cloud_name }}"
    state: present
    name: "{{ item.network }}"
  with_items:
    - "{{ network_points }}"
  register: created_networks

- name: attach a subnet to the logical network
  os_subnet:
    cloud: "{{ cloud_name }}"
    state: present
    network_name: "{{ item.1.network.id }}"
    name: "{{ item.0.subnet_name }}"
    ip_version: "{{ item.0.ip_version | default(omit) }}"
    cidr: "{{ item.0.cidr }}"
    gateway_ip: "{{ item.0.gateway_ip | default(omit) }}"
    enable_dhcp: yes
    ipv6_address_mode: "{{ item.0.ipv6_address_mode | default(omit) }}"
  when:
    - item.0.subnet_name is defined
    - item.0.cidr is defined
  with_together:
    - "{{ network_points }}"
    - "{{ created_networks.results }}"
  register: created_subnets

- name: create ports in the logical network
  os_port:
    cloud: "{{ cloud_name }}"
    name: "{{ item.0.name }}"
    state: present
    network: "{{ item.1.network.id }}"
    fixed_ips:
      - subnet_id: "{{ item.2.subnet.id }}"
        ip_address: "{{ item.0.ip | default(omit) }}"
    mac_address: "{{ item.0.mac | default(omit) }}"
  with_together:
    - "{{ network_points }}"
    - "{{ created_networks.results }}"
    - "{{ created_subnets.results }}"
  register: created_ports

- name: provision routers in the control plane
  os_router:
    cloud: "{{ cloud_name }}"
    name: "{{ item.name }}"
    state: present
    interfaces: "{{ item.interfaces | default([]) }}"
  when:
    - created_subnets.results | length > 0
  with_items:
    - "{{ routers | default([]) }}"
