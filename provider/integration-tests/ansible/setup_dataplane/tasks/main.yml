---
- name: create the ip namespaces
  delegate_to: "{{ controller_container_id }}"
  ip_netns:
    name: "{{ item.ns }}"
    state: present
  with_items:
    - "{{ network_points }}"

- name: get ovn port data
  os_port_facts:
    cloud: "{{ cloud_name }}"

- name: create ports
  delegate_to: "{{ controller_container_id }}"
  command:
    ovs-vsctl add-port br-int "{{ item.name }}" -- set Interface "{{ item.name }}" type=internal external_ids:iface-id="{{ item.id }}"
  with_items:
    - "{{ openstack_ports }}"

- name: attach the ports to the namespaces
  delegate_to: "{{ controller_container_id }}"
  command:
    ip link set "{{ item.name }}" netns "{{ item.ns }}"
  with_items:
    - "{{ network_points }}"

- debug: var=openstack_ports

- name: set mac addresses on the ports
  delegate_to: "{{ controller_container_id }}"
  command:
    "ip netns exec {{ item.ns }} ip link set {{ item.name }} address {{ item.mac }}"
  when:
    - item.mac is defined
  with_items:
  - "{{ network_points }}"

- name: activate the interfaces
  delegate_to: "{{ controller_container_id }}"
  command:
    ip netns exec "{{ item.ns }}" ip link set "{{ item.name }}" up
  with_items:
    - "{{ network_points }}"

- name: set static ip addresses on the ports
  delegate_to: "{{ controller_container_id }}"
  command:
    ip netns exec "{{ item.ns }}" ip addr add "{{ item.ip }}"/24 dev "{{ item.name }}"
  when:
    - item.ip is defined
  with_items:
    - "{{ network_points }}"

- name: namespace dynamic ipv4 configuration
  delegate_to: "{{ controller_container_id }}"
  command:
    "timeout 1m ip netns exec {{ item.ns }} dhclient -4 -lf /var/lib/dhclient/{{ item.ns }}.lease --no-pid {{ item.name }}"
  with_items:
    - "{{ network_points }}"
  when:
    - "'ip' not in item"
    - item.cidr | ipv4

- name: namespace dynamic ipv6 configuration
  delegate_to: "{{ controller_container_id }}"
  command:
    "timeout 1m ip netns exec {{ item.ns }} dhclient -6 -lf /var/lib/dhclient/{{ item.ns }}.lease --no-pid {{ item.name }}"
  when:
    - "'ip' not in item"
    - item.cidr | ipv6
  with_items:
  - "{{ network_points }}"
